package boxStack;
import java.util.*;
import java.util.HashSet;
//import java.util.List;

public class StackCreator {
	List<Box> rotatedBoxes;
	public StackCreator(List<Box> b){
		rotatedBoxes = b;
	}
	public void stack(){
		int[] height = new int[rotatedBoxes.size()];
		HashSet<Integer> stacks[] = new HashSet[rotatedBoxes.size()];
		for(int i = 0; i < rotatedBoxes.size(); i++){
			HashSet hs = new HashSet();
			hs.add(rotatedBoxes.get(i).getName());
			height[i]=rotatedBoxes.get(i).getHeight();
			stacks[i]=hs;
		}
		for (int i = 1; i < stacks.length; i++) {
			for (int j = 0; j < i; j++) {
				if (rotatedBoxes.get(i).getFace()[0] < rotatedBoxes.get(j).getFace()[0] &&
						rotatedBoxes.get(i).getFace()[1] < rotatedBoxes.get(j).getFace()[1] &&
						height[i] < height[j] + rotatedBoxes.get(i).getHeight())
				{
						stacks[i] =  (HashSet)stacks[j].clone();
						height[i]= height[j];
 						if(stacks[i].add(rotatedBoxes.get(i).getName()))
 						height[i]+=rotatedBoxes.get(i).getHeight();
				}
			}
		}
		int h=0;
		int j=0;
		for(int i=0;i<height.length;i++){
			if(h<height[i]){
			h=height[i];
			j=i;
			}
		}
		System.out.println("size:"+stacks[j].size());
		System.out.println("height:"+h);
	}
}



package boxStack;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
public class BoxStacker {
	public static void main(String[] args) {
			int count = 0;
			List<Box> boxes = new ArrayList<>();
while(count<10){
				Box box = new Box((int)(Math.random()*20+1),(int)(Math.random()*20+1),(int)(Math.random()*20+1), 1, ++count);
				boxes.add(box);
				for(int i = 2; i <7; i++){
					boxes.add(box.rotate(i, count));
				}
			}
			long t = System.currentTimeMillis();
			Collections.sort(boxes);
			StackCreator sc = new StackCreator(boxes);
			sc.stack();
			System.out.println("Time :"+(System.currentTimeMillis()-t)/1000f+" ms");
	}
}


package boxStack;

public class Box implements Comparable<Box>{
	private final int d1;
	private final int d2; 
	private final int d3; 
	private final int name;
	private int orientation;

	public Box(int d1, int d2, int d3, int o, int name){
		this.d1 = d1;
		this.d2 = d2;
		this.d3 = d3; 
		this.name = name;
		orientation = o; 
	}
	public int[] getFace(){
		switch (orientation) {
		case 1:
			return new int[]{d2,d3};
		case 2:
			return new int[]{d3,d2};
		case 3:
			return new int[]{d3,d1};
		case 4:
			return new int[]{d1,d3};
		case 5:
			return new int[]{d2,d1};
		case 6:
			return new int[]{d1,d2};
		default:
			return null;
		}
	}
	public Box rotate(int orientation, int name){
		Box newBox = new Box(this.d1, this.d2, this.d3, orientation, name);
		return newBox;
	}
	public int getHeight(){
		switch (orientation) {
		case 1:
			return d1;
		case 2:
			return d1;
		case 3:
			return d2;
		case 4:
			return d2;
		case 5:
			return d3;
		case 6:
			return d3;
		default:
			return 0;
		}

	}

	public int getName(){
		return name;
	}
  //  public int getD1() {return d1;}
//	public int getD2() {return d2;}
//	public int getD3() {return d3;}
	public int compareTo(Box x) {
		return x.getFace()[0] - this.getFace()[0];
	}
}

